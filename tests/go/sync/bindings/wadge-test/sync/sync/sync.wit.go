// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package sync represents the imported interface "wadge-test:sync/sync@0.1.0".
package sync

import (
	"go.bytecodealliance.org/cm"
)

// Abc represents the flags "wadge-test:sync/sync@0.1.0#abc".
//
//	flags abc {
//		a,
//		b,
//		c,
//	}
type Abc uint8

const (
	AbcA Abc = 1 << iota
	AbcB
	AbcC
)

// RecNested represents the record "wadge-test:sync/sync@0.1.0#rec-nested".
//
//	record rec-nested {
//		foo: string,
//	}
type RecNested struct {
	_   cm.HostLayout `json:"-"`
	Foo string        `json:"foo"`
}

// Rec represents the record "wadge-test:sync/sync@0.1.0#rec".
//
//	record rec {
//		nested: rec-nested,
//	}
type Rec struct {
	_      cm.HostLayout `json:"-"`
	Nested RecNested     `json:"nested"`
}

// Var represents the variant "wadge-test:sync/sync@0.1.0#var".
//
//	variant var {
//		some(rec),
//		empty,
//	}
type Var cm.Variant[uint8, Rec, Rec]

// VarSome returns a [Var] of case "some".
func VarSome(data Rec) Var {
	return cm.New[Var](0, data)
}

// Some returns a non-nil *[Rec] if [Var] represents the variant case "some".
func (self *Var) Some() *Rec {
	return cm.Case[Rec](self, 0)
}

// VarEmpty returns a [Var] of case "empty".
func VarEmpty() Var {
	var data struct{}
	return cm.New[Var](1, data)
}

// Empty returns true if [Var] represents the variant case "empty".
func (self *Var) Empty() bool {
	return self.Tag() == 1
}

var _VarStrings = [2]string{
	"some",
	"empty",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v Var) String() string {
	return _VarStrings[v.Tag()]
}

// Foobar represents the enum "wadge-test:sync/sync@0.1.0#foobar".
//
//	enum foobar {
//		foo,
//		bar
//	}
type Foobar uint8

const (
	FoobarFoo Foobar = iota
	FoobarBar
)

var _FoobarStrings = [2]string{
	"foo",
	"bar",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e Foobar) String() string {
	return _FoobarStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e Foobar) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *Foobar) UnmarshalText(text []byte) error {
	return _FoobarUnmarshalCase(e, text)
}

var _FoobarUnmarshalCase = cm.CaseUnmarshaler[Foobar](_FoobarStrings[:])

// Primitives represents the record "wadge-test:sync/sync@0.1.0#primitives".
//
//	record primitives {
//		a: u8,
//		b: u16,
//		c: u32,
//		d: u64,
//		e: s8,
//		f: s16,
//		g: s32,
//		h: s64,
//		i: f32,
//		j: f64,
//		k: bool,
//		l: char,
//		m: string,
//	}
type Primitives struct {
	_ cm.HostLayout `json:"-"`
	A uint8         `json:"a"`
	B uint16        `json:"b"`
	C uint32        `json:"c"`
	D uint64        `json:"d"`
	E int8          `json:"e"`
	F int16         `json:"f"`
	G int32         `json:"g"`
	H int64         `json:"h"`
	I float32       `json:"i"`
	J float64       `json:"j"`
	K bool          `json:"k"`
	L rune          `json:"l"`
	M string        `json:"m"`
}

// Res represents the imported resource "wadge-test:sync/sync@0.1.0#res".
//
//	resource res
type Res cm.Resource

// ResourceDrop represents the imported resource-drop for resource "res".
//
// Drops a resource handle.
//
//go:nosplit
func (self Res) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ResResourceDrop((uint32)(self0))
	return
}

// NewRes represents the imported constructor for resource "res".
//
//	constructor()
//
//go:nosplit
func NewRes() (result Res) {
	result0 := wasmimport_NewRes()
	result = cm.Reinterpret[Res]((uint32)(result0))
	return
}

// ResMakeList represents the imported static function "make-list".
//
//	make-list: static func() -> list<res>
//
//go:nosplit
func ResMakeList() (result cm.List[Res]) {
	wasmimport_ResMakeList(&result)
	return
}

// Foo represents the imported method "foo".
//
//	foo: func() -> string
//
//go:nosplit
func (self Res) Foo() (result string) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ResFoo((uint32)(self0), &result)
	return
}

// IdentityBool represents the imported function "identity-bool".
//
//	identity-bool: func(arg: bool) -> bool
//
//go:nosplit
func IdentityBool(arg bool) (result bool) {
	arg0 := (uint32)(cm.BoolToU32(arg))
	result0 := wasmimport_IdentityBool((uint32)(arg0))
	result = (bool)(cm.U32ToBool((uint32)(result0)))
	return
}

// IdentityS8 represents the imported function "identity-s8".
//
//	identity-s8: func(arg: s8) -> s8
//
//go:nosplit
func IdentityS8(arg int8) (result int8) {
	arg0 := (uint32)(arg)
	result0 := wasmimport_IdentityS8((uint32)(arg0))
	result = (int8)((uint32)(result0))
	return
}

// IdentityU8 represents the imported function "identity-u8".
//
//	identity-u8: func(arg: u8) -> u8
//
//go:nosplit
func IdentityU8(arg uint8) (result uint8) {
	arg0 := (uint32)(arg)
	result0 := wasmimport_IdentityU8((uint32)(arg0))
	result = (uint8)((uint32)(result0))
	return
}

// IdentityS16 represents the imported function "identity-s16".
//
//	identity-s16: func(arg: s16) -> s16
//
//go:nosplit
func IdentityS16(arg int16) (result int16) {
	arg0 := (uint32)(arg)
	result0 := wasmimport_IdentityS16((uint32)(arg0))
	result = (int16)((uint32)(result0))
	return
}

// IdentityU16 represents the imported function "identity-u16".
//
//	identity-u16: func(arg: u16) -> u16
//
//go:nosplit
func IdentityU16(arg uint16) (result uint16) {
	arg0 := (uint32)(arg)
	result0 := wasmimport_IdentityU16((uint32)(arg0))
	result = (uint16)((uint32)(result0))
	return
}

// IdentityS32 represents the imported function "identity-s32".
//
//	identity-s32: func(arg: s32) -> s32
//
//go:nosplit
func IdentityS32(arg int32) (result int32) {
	arg0 := (uint32)(arg)
	result0 := wasmimport_IdentityS32((uint32)(arg0))
	result = (int32)((uint32)(result0))
	return
}

// IdentityU32 represents the imported function "identity-u32".
//
//	identity-u32: func(arg: u32) -> u32
//
//go:nosplit
func IdentityU32(arg uint32) (result uint32) {
	arg0 := (uint32)(arg)
	result0 := wasmimport_IdentityU32((uint32)(arg0))
	result = (uint32)((uint32)(result0))
	return
}

// IdentityS64 represents the imported function "identity-s64".
//
//	identity-s64: func(arg: s64) -> s64
//
//go:nosplit
func IdentityS64(arg int64) (result int64) {
	arg0 := (uint64)(arg)
	result0 := wasmimport_IdentityS64((uint64)(arg0))
	result = (int64)((uint64)(result0))
	return
}

// IdentityU64 represents the imported function "identity-u64".
//
//	identity-u64: func(arg: u64) -> u64
//
//go:nosplit
func IdentityU64(arg uint64) (result uint64) {
	arg0 := (uint64)(arg)
	result0 := wasmimport_IdentityU64((uint64)(arg0))
	result = (uint64)((uint64)(result0))
	return
}

// IdentityF32 represents the imported function "identity-f32".
//
//	identity-f32: func(arg: f32) -> f32
//
//go:nosplit
func IdentityF32(arg float32) (result float32) {
	arg0 := (float32)(arg)
	result0 := wasmimport_IdentityF32((float32)(arg0))
	result = (float32)((float32)(result0))
	return
}

// IdentityF64 represents the imported function "identity-f64".
//
//	identity-f64: func(arg: f64) -> f64
//
//go:nosplit
func IdentityF64(arg float64) (result float64) {
	arg0 := (float64)(arg)
	result0 := wasmimport_IdentityF64((float64)(arg0))
	result = (float64)((float64)(result0))
	return
}

// IdentityChar represents the imported function "identity-char".
//
//	identity-char: func(arg: char) -> char
//
//go:nosplit
func IdentityChar(arg rune) (result rune) {
	arg0 := (uint32)(arg)
	result0 := wasmimport_IdentityChar((uint32)(arg0))
	result = (rune)((uint32)(result0))
	return
}

// IdentityString represents the imported function "identity-string".
//
//	identity-string: func(arg: string) -> string
//
//go:nosplit
func IdentityString(arg string) (result string) {
	arg0, arg1 := cm.LowerString(arg)
	wasmimport_IdentityString((*uint8)(arg0), (uint32)(arg1), &result)
	return
}

// IdentityFlags represents the imported function "identity-flags".
//
//	identity-flags: func(arg: abc) -> abc
//
//go:nosplit
func IdentityFlags(arg Abc) (result Abc) {
	arg0 := (uint32)(arg)
	result0 := wasmimport_IdentityFlags((uint32)(arg0))
	result = (Abc)((uint32)(result0))
	return
}

// IdentityEnum represents the imported function "identity-enum".
//
//	identity-enum: func(arg: foobar) -> foobar
//
//go:nosplit
func IdentityEnum(arg Foobar) (result Foobar) {
	arg0 := (uint32)(arg)
	result0 := wasmimport_IdentityEnum((uint32)(arg0))
	result = (Foobar)((uint32)(result0))
	return
}

// IdentityVariant represents the imported function "identity-variant".
//
//	identity-variant: func(arg: var) -> var
//
//go:nosplit
func IdentityVariant(arg Var) (result Var) {
	arg0, arg1, arg2 := lower_Var(arg)
	wasmimport_IdentityVariant((uint32)(arg0), (*uint8)(arg1), (uint32)(arg2), &result)
	return
}

// IdentityOptionString represents the imported function "identity-option-string".
//
//	identity-option-string: func(arg: option<string>) -> option<string>
//
//go:nosplit
func IdentityOptionString(arg cm.Option[string]) (result cm.Option[string]) {
	arg0, arg1, arg2 := lower_OptionString(arg)
	wasmimport_IdentityOptionString((uint32)(arg0), (*uint8)(arg1), (uint32)(arg2), &result)
	return
}

// IdentityResultString represents the imported function "identity-result-string".
//
//	identity-result-string: func(arg: result<string>) -> result<string>
//
//go:nosplit
func IdentityResultString(arg cm.Result[string, string, struct{}]) (result cm.Result[string, string, struct{}]) {
	arg0, arg1, arg2 := lower_ResultString(arg)
	wasmimport_IdentityResultString((uint32)(arg0), (*uint8)(arg1), (uint32)(arg2), &result)
	return
}

// IdentityRecordPrimitives represents the imported function "identity-record-primitives".
//
//	identity-record-primitives: func(arg: primitives) -> primitives
//
//go:nosplit
func IdentityRecordPrimitives(arg Primitives) (result Primitives) {
	arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13 := lower_Primitives(arg)
	wasmimport_IdentityRecordPrimitives((uint32)(arg0), (uint32)(arg1), (uint32)(arg2), (uint64)(arg3), (uint32)(arg4), (uint32)(arg5), (uint32)(arg6), (uint64)(arg7), (float32)(arg8), (float64)(arg9), (uint32)(arg10), (uint32)(arg11), (*uint8)(arg12), (uint32)(arg13), &result)
	return
}

// IdentityRecordRec represents the imported function "identity-record-rec".
//
//	identity-record-rec: func(arg: rec) -> rec
//
//go:nosplit
func IdentityRecordRec(arg Rec) (result Rec) {
	arg0, arg1 := lower_Rec(arg)
	wasmimport_IdentityRecordRec((*uint8)(arg0), (uint32)(arg1), &result)
	return
}

// IdentityTuple represents the imported function "identity-tuple".
//
//	identity-tuple: func(arg: tuple<u8, u16, u32, u64, s8, s16, s32, s64, f32, f64,
//	bool, char, string>) -> tuple<u8, u16, u32, u64, s8, s16, s32, s64, f32, f64, bool,
//	char, string>
//
//go:nosplit
func IdentityTuple(arg cm.Tuple13[uint8, uint16, uint32, uint64, int8, int16, int32, int64, float32, float64, bool, rune, string]) (result cm.Tuple13[uint8, uint16, uint32, uint64, int8, int16, int32, int64, float32, float64, bool, rune, string]) {
	arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13 := lower_TupleU8U16U32U64S8S16S32S64F32F64BoolCharString(arg)
	wasmimport_IdentityTuple((uint32)(arg0), (uint32)(arg1), (uint32)(arg2), (uint64)(arg3), (uint32)(arg4), (uint32)(arg5), (uint32)(arg6), (uint64)(arg7), (float32)(arg8), (float64)(arg9), (uint32)(arg10), (uint32)(arg11), (*uint8)(arg12), (uint32)(arg13), &result)
	return
}

// IdentityListBool represents the imported function "identity-list-bool".
//
//	identity-list-bool: func(arg: list<bool>) -> list<bool>
//
//go:nosplit
func IdentityListBool(arg cm.List[bool]) (result cm.List[bool]) {
	arg0, arg1 := cm.LowerList(arg)
	wasmimport_IdentityListBool((*bool)(arg0), (uint32)(arg1), &result)
	return
}

// IdentityListU16 represents the imported function "identity-list-u16".
//
//	identity-list-u16: func(arg: list<u16>) -> list<u16>
//
//go:nosplit
func IdentityListU16(arg cm.List[uint16]) (result cm.List[uint16]) {
	arg0, arg1 := cm.LowerList(arg)
	wasmimport_IdentityListU16((*uint16)(arg0), (uint32)(arg1), &result)
	return
}

// IdentityListString represents the imported function "identity-list-string".
//
//	identity-list-string: func(arg: list<string>) -> list<string>
//
//go:nosplit
func IdentityListString(arg cm.List[string]) (result cm.List[string]) {
	arg0, arg1 := cm.LowerList(arg)
	wasmimport_IdentityListString((*string)(arg0), (uint32)(arg1), &result)
	return
}

// IdentityListEnum represents the imported function "identity-list-enum".
//
//	identity-list-enum: func(arg: list<foobar>) -> list<foobar>
//
//go:nosplit
func IdentityListEnum(arg cm.List[Foobar]) (result cm.List[Foobar]) {
	arg0, arg1 := cm.LowerList(arg)
	wasmimport_IdentityListEnum((*Foobar)(arg0), (uint32)(arg1), &result)
	return
}

// IdentityListFlags represents the imported function "identity-list-flags".
//
//	identity-list-flags: func(arg: list<abc>) -> list<abc>
//
//go:nosplit
func IdentityListFlags(arg cm.List[Abc]) (result cm.List[Abc]) {
	arg0, arg1 := cm.LowerList(arg)
	wasmimport_IdentityListFlags((*Abc)(arg0), (uint32)(arg1), &result)
	return
}

// IdentityListRecordPrimitives represents the imported function "identity-list-record-primitives".
//
//	identity-list-record-primitives: func(arg: list<primitives>) -> list<primitives>
//
//go:nosplit
func IdentityListRecordPrimitives(arg cm.List[Primitives]) (result cm.List[Primitives]) {
	arg0, arg1 := cm.LowerList(arg)
	wasmimport_IdentityListRecordPrimitives((*Primitives)(arg0), (uint32)(arg1), &result)
	return
}

// IdentityListVariant represents the imported function "identity-list-variant".
//
//	identity-list-variant: func(arg: list<var>) -> list<var>
//
//go:nosplit
func IdentityListVariant(arg cm.List[Var]) (result cm.List[Var]) {
	arg0, arg1 := cm.LowerList(arg)
	wasmimport_IdentityListVariant((*Var)(arg0), (uint32)(arg1), &result)
	return
}

// IdentityListOptionString represents the imported function "identity-list-option-string".
//
//	identity-list-option-string: func(arg: list<option<string>>) -> list<option<string>>
//
//go:nosplit
func IdentityListOptionString(arg cm.List[cm.Option[string]]) (result cm.List[cm.Option[string]]) {
	arg0, arg1 := cm.LowerList(arg)
	wasmimport_IdentityListOptionString((*cm.Option[string])(arg0), (uint32)(arg1), &result)
	return
}

// IdentityListResultString represents the imported function "identity-list-result-string".
//
//	identity-list-result-string: func(arg: list<result<string>>) -> list<result<string>>
//
//go:nosplit
func IdentityListResultString(arg cm.List[cm.Result[string, string, struct{}]]) (result cm.List[cm.Result[string, string, struct{}]]) {
	arg0, arg1 := cm.LowerList(arg)
	wasmimport_IdentityListResultString((*cm.Result[string, string, struct{}])(arg0), (uint32)(arg1), &result)
	return
}

// IdentityListListString represents the imported function "identity-list-list-string".
//
//	identity-list-list-string: func(arg: list<list<string>>) -> list<list<string>>
//
//go:nosplit
func IdentityListListString(arg cm.List[cm.List[string]]) (result cm.List[cm.List[string]]) {
	arg0, arg1 := cm.LowerList(arg)
	wasmimport_IdentityListListString((*cm.List[string])(arg0), (uint32)(arg1), &result)
	return
}

// IdentityPrimitives represents the imported function "identity-primitives".
//
//	identity-primitives: func(a: u8, b: u16, c: u32, d: u64, e: s8, f: s16, g: s32,
//	h: s64, i: f32, j: f64, k: bool, l: char, m: string) -> tuple<u8, u16, u32, u64,
//	s8, s16, s32, s64, f32, f64, bool, char, string>
//
//go:nosplit
func IdentityPrimitives(a uint8, b uint16, c uint32, d uint64, e int8, f int16, g int32, h int64, i float32, j float64, k bool, l rune, m string) (result cm.Tuple13[uint8, uint16, uint32, uint64, int8, int16, int32, int64, float32, float64, bool, rune, string]) {
	a0 := (uint32)(a)
	b0 := (uint32)(b)
	c0 := (uint32)(c)
	d0 := (uint64)(d)
	e0 := (uint32)(e)
	f0 := (uint32)(f)
	g0 := (uint32)(g)
	h0 := (uint64)(h)
	i0 := (float32)(i)
	j0 := (float64)(j)
	k0 := (uint32)(cm.BoolToU32(k))
	l0 := (uint32)(l)
	m0, m1 := cm.LowerString(m)
	wasmimport_IdentityPrimitives((uint32)(a0), (uint32)(b0), (uint32)(c0), (uint64)(d0), (uint32)(e0), (uint32)(f0), (uint32)(g0), (uint64)(h0), (float32)(i0), (float64)(j0), (uint32)(k0), (uint32)(l0), (*uint8)(m0), (uint32)(m1), &result)
	return
}
